@startuml
skinparam classAttributeIconSize 0
hide empty members
hide circle

package dataModel {

interface DataModelProvider {
   + isModelExisting(name: string): boolean
   + createDataModel(name: string)

   + getWriteContext(name: string): WriteContext
   + getReadContext(name: string): ReadContext
}

class DataEntryId {
   - entryType: string
   - key: UUID
   + equals(other: DataEntryId): boolean
}

package writing {

interface WriteContext {
   + start(): WriteAccess
   + stop()
   + cancel()
}

DataModelProvider -down-> WriteContext

interface WriteAccess {
   + isAccessAllowed(entries: DataEntryId[]): boolean
   + isControlAllowed(entries: DataEntryId[]): boolean
   
   + addHistoryEntry(message: string, contextId: DataEntryId): int
}

WriteContext --> WriteAccess

}

package reading {

DataModelProvider -down-> ReadContext

interface ReadContext {
   + prepare()
   + unprepare()
   
   + readHistoryEntries(lastInstance: int, reader: HistoryReader) 
}

ReadContext -- HistoryReader
HistoryReader --> ReadAccess
ReadAccess -- ModelReader

interface ReadAccess {
   + getCurrentInstanceId()
   + isAccessAllowed(entryId: DataEntryId): boolean
   + readModel(reader: ModelReader)
}

interface HistoryReader {
   + reset(access: ReadAccess)
   + receive(access: ReadAccess, entryInstance: int, message: string, contextId: DataEntryId)
}

interface ModelReader {
   + onEntry(entryId: EntryId, data: map)
}

}
}

package database {
class DatabaseDataContext {
   - transactionControl
   - statementExecutorFactory
   - tableNames: string[]
   - modelId: UUID
   + getModelId(): UUID
   + startTransaction(forWrite: boolean): int
   + commitTransaction()
   + rollbackTransaction()
   + getStatementExecutor(query: Query): StatementExecutor
}

class DatabaseWriteContext {
   - dataContext: DatabaseDataContext
   - newInstance: int
   - historyInsertQuery: InsertQuery
   - historyInsertExecutor: StatementExecutor
}


class DatabaseReadContext {
   - dataContext: DatabaseDataContext
   - historySelectQuery: SelectQuery
   - historySelectExecutor: StatementExecutor
}

class DatabaseDataModelProvider {
   - transactionControl
   - statementExecutorFactory
   - tableNames: string[]
}


DatabaseDataModelProvider -left-> DatabaseWriteContext
DatabaseDataModelProvider -right-> DatabaseReadContext

DatabaseWriteContext *-down-> DatabaseDataContext
DatabaseReadContext *-down-> DatabaseDataContext
}

@enduml
